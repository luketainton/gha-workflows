name: Python w/ Poetry + Docker CI
on:
  workflow_call:
    inputs:
      python-version:
        type: string
        default: "3.11"
        description: "Version of Python to use for testing environment"
    secrets:
      SONAR_TOKEN:
        required: true
      SNYK_TOKEN:
        required: true

env:
  PATH: ${{ env.PATH }}:/root/.poetry/bin

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4.3.0
        with:
          fetch-depth: 0

      - uses: hadolint/hadolint-action@v3.2.0
        with:
          dockerfile: Dockerfile
          output-file: hadolint.out
          format: sonarqube
          no-fail: true

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: "${{ inputs.python-version }}"

      - name: Setup Poetry
        uses: abatilo/actions-poetry@v4

      - name: Setup virtual environment
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local

      - uses: actions/cache@v4
        name: Define cache for dependencies
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
          restore-keys: venv-${{ hashFiles('poetry.lock') }}

      - name: Install dependencies
        run: poetry install

      - name: Lint
        run: |
          poetry run pylint --fail-under=8 --recursive=yes --output-format=parseable --output=lintreport.txt .
          cat lintreport.txt

      - name: Unit Test
        run: |
          poetry run coverage run -m pytest -v --junitxml=testresults.xml
          poetry run coverage xml
          sed -i 's@${{ gitea.workspace }}@/github/workspace@g' coverage.xml

      - name: SonarQube Cloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.3.1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Snyk Vulnerability Scan
        uses: snyk/actions/python@master
        continue-on-error: true # Sometimes vulns aren't immediately fixable
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: test --all-projects
